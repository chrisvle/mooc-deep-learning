def sample(a, temperature=1.0):
    # helper function to sample an index from a probability array
    a = np.log(a) / temperature
    a = np.exp(a) / np.sum(np.exp(a))
    return np.argmax(np.random.multinomial(1, a, 1))

# train the model, output generated text after each iteration
for iteration in range(1, 60):
    print()
    print('-' * 50)
    print('Iteration', iteration)
    #model.fit(X, y, batch_size=256, nb_epoch=1)

    start_index = random.randint(0, len(sequences))

    for diversity in [0.2, 0.5, 1.0, 1.2]:
        print()
        print('----- diversity:', diversity)

        generated = []
        sentence = X[start_index]
        word_sentence = [indices_word[wd] for wd in sentence]
        generated.extend(sentence)
        print('----- Generating with seed: "')
        print(word_sentence)
        sys.stdout.write(word_sentence)

        for iteration in range(20):
            x = np.zeros((1, window_len))
            for t, char in enumerate(sentence):
                x[0, t] = sentence[t]
            preds = model.predict(x, verbose=0)[0]
            next_index = sample(preds[window_len-1], diversity)
            next_word = indices_word[next_index]

            generated.append(next_word)
            sentence = sentence[1:] + [next_index]

            sys.stdout.write(next_word)
            sys.stdout.flush()
        print()
